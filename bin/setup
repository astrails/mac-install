#!/bin/bash

NC='\033[0m'

BLACK=`tput setaf 0`
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
MAGENTA=`tput setaf 5`
CYAN=`tput setaf 6`
WHITE=`tput setaf 7`

BOLD=`tput bold`

BG_RED=`tput setab 1`
BG_YELLOW=`tput setab 3`

function info() { echo -e "${BLUE}${BOLD}INFO:${NC}${BLUE} $@${NC}"; }
function warn() { echo -e "\n${BG_YELLOW}${BLACK}WARNING:${NC}${YELLOW}${BOLD} $@${NC}\n"; }
function error() { echo -e "\n${BG_RED}${BLACK}ERROR:${NC}${RED}${BOLD} $@${NC}\n\n"; }

function die() { error "$@"; exit 1; }

if [ '-v' = "$1" ]; then
  shift
  V=v
else
  V=
fi

function l() { [ -n "$V" ] && echo; }
function i() { [ -n "$V" ] && info "$@"; }
function w() { [ -n "$V" ] && warn "$@"; }

OLD_ROOT=~/2
OLD_HOME=~/2$HOME
function old_present() { [ -h $OLD_ROOT -a -e $OLD_ROOT ]; }

function ask()
{
  echo
  echo -ne "${GREEN}${BOLD}$*?${NC} "
  read a

  [[ 'y' == "$a" || "Y" == "$a" ]]
}

function from_home()
{
  old_present || return # silently skip
  l
  local op="$1"; shift
  local d="$1"; shift

  if [ -e ~/"$d" ]; then
    i "~/$d already exists"
    return 1

  elif [ ! -e $OLD_HOME/"$d" ]; then
    w "$OLD_HOME/$d doesn't exist"
    return 1

  else
    ask "$op ~/$d from old homedir" &&
      (set -x; $op $OLD_HOME/"$d" ~/"$d")
    return 0
  fi
  l
}

function home_move() { from_home mv "$@" ; }
function home_copy() { from_home cp "$@" ; }

function _ln()
{
  if [ -e "$2" ]; then
    [ ! -h "$2" ] \
      && warn "'$2' is exists and is not a link" \
      || ln -sfn$V "$1" "$2"
  else
    ln -sfnv "$1" "$2" # creating link, always verbose
  fi
}

################################################################################
################################################################################

## PRECONDITIONS

old_present || warn "Please link $OLD_ROOT to the old drive root"

## 'MY' DIR

home_move "my"

if [ -d ~/my ]; then
  _ln my/astrails      ~/a
  _ln my/config/dotzsh ~/.zsh
  _ln my/config/dotvim ~/.vim
  _ln my/config/dotfiles ~/.dot
  _ln my/config/dirs ~/.g
  _ln my/config/auth ~/.auth
fi


## TRIVIAL BASICS

_ln ~/Downloads ~/d

## BREW

if [ ! -e /usr/include/iconv.h ]; then
  ask "install xcode command line tools" &&
    xcode-select --install
fi

if [ -z "`which brew`" ]; then
  ask "install brew" &&
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
  i brew installed
fi

function brew_ensure()
{
  if [ ! -d /usr/local/Cellar/$1 ]; then
    (set -x; brew install $*)
  else
    i brew: $1 already installed
  fi
}

function brew_install()
{
  for pkg in "$@"; do
    brew_ensure $pkg
  done
}

brew_install "macvim --override-system-vim" \
  aria2 ack ctags direnv pstree s3cmd \
  tig tmux tree unrar watch wget dos2unix \
  gettext imagemagick md5deep mtr git gnupg2 \
  htop-osx iftop

brew_install zsh zsh-completions

brew_install docker docker-machine docker-swarm

brew_install erlang elixir

brew_install postgresql leiningen

## POW

if [ ! -d ~/"Library/Application Support/Pow/Hosts" ]; then
  ask "install pow" &&
    (set -x; curl get.pow.cx | sh)
fi

POW="Library/Application Support/Pow/Hosts"
home_move "$POW"
_ln "$POW" ~/.pow

## KEYCHAINS

KEYCHAINS="Library/Keychains"
for k in $OLD_HOME/$KEYCHAINS/*.keychain; do
  [ -e "$k" ] || continue
  f=~/$KEYCHAINS/"old_$(basename $k)"
  if [ -e "$f" ]; then
    if diff -q "$k" "$f" > /dev/null; then
      i already copied $k
    else
       w "keychains: $k and $f differ"
    fi
  else
    ask "copy keychain $k" &&
      cp -v "$k" "$f"
  fi
done

## Settings

# Mailplane 3
home_move "Library/Application Support/Mailplane 3"

home_move "Library/Application Support/Alfred 2"

home_move ".config/direnv"

home_move ".ssh"

## FONTS

FONTS=Library/Fonts
function font()
{
  local font="$(basename $1)"
  if [ ! -e "/$FONTS/$font" ]; then
    ask "install $font" &&
      wget "$1" -O "/$FONTS/$font"
  fi
}

font http://www.levien.com/type/myfonts/Inconsolata.otf
font https://gist.github.com/raw/1595572/Inconsolata-dz-Powerline.otf
font https://gist.github.com/raw/1595572/Menlo-Powerline.otf
font https://gist.github.com/raw/1595572/mensch-Powerline.otf

if old_present; then
  i "copying fonts"
  cp -n $OLD_HOME/$FONTS/* ~/$FONTS
fi

## Skype

home_move "Library/Application Support/Skype/vitaly.k"

## pip

if [ -z "`which pip`" ]; then
  ask "install python pip" &&
    sudo easy_install pip
fi

if [ -z "`which howdoi`" ]; then
  ask "install howdoi" &&
    pip install howdoi
fi
